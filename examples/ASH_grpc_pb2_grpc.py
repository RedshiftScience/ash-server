# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ASH_grpc_pb2 as ASH__grpc__pb2


class ServerPIPERServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SynthesizePiper = channel.unary_unary(
                '/ServerPIPERService/SynthesizePiper',
                request_serializer=ASH__grpc__pb2.ServerPIPERRequest.SerializeToString,
                response_deserializer=ASH__grpc__pb2.ServerPIPERResponse.FromString,
                )


class ServerPIPERServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SynthesizePiper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerPIPERServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SynthesizePiper': grpc.unary_unary_rpc_method_handler(
                    servicer.SynthesizePiper,
                    request_deserializer=ASH__grpc__pb2.ServerPIPERRequest.FromString,
                    response_serializer=ASH__grpc__pb2.ServerPIPERResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerPIPERService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerPIPERService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SynthesizePiper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerPIPERService/SynthesizePiper',
            ASH__grpc__pb2.ServerPIPERRequest.SerializeToString,
            ASH__grpc__pb2.ServerPIPERResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerTTSServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SynthesizeTTS = channel.unary_unary(
                '/ServerTTSService/SynthesizeTTS',
                request_serializer=ASH__grpc__pb2.ServerTTSRequest.SerializeToString,
                response_deserializer=ASH__grpc__pb2.ServerTTSResponse.FromString,
                )


class ServerTTSServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SynthesizeTTS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerTTSServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SynthesizeTTS': grpc.unary_unary_rpc_method_handler(
                    servicer.SynthesizeTTS,
                    request_deserializer=ASH__grpc__pb2.ServerTTSRequest.FromString,
                    response_serializer=ASH__grpc__pb2.ServerTTSResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerTTSService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerTTSService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SynthesizeTTS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerTTSService/SynthesizeTTS',
            ASH__grpc__pb2.ServerTTSRequest.SerializeToString,
            ASH__grpc__pb2.ServerTTSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerRVCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessAudio = channel.unary_unary(
                '/ServerRVCService/ProcessAudio',
                request_serializer=ASH__grpc__pb2.ServerRVCRequest.SerializeToString,
                response_deserializer=ASH__grpc__pb2.ServerRVCResponse.FromString,
                )


class ServerRVCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ProcessAudio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerRVCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessAudio': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessAudio,
                    request_deserializer=ASH__grpc__pb2.ServerRVCRequest.FromString,
                    response_serializer=ASH__grpc__pb2.ServerRVCResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ServerRVCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerRVCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ProcessAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ServerRVCService/ProcessAudio',
            ASH__grpc__pb2.ServerRVCRequest.SerializeToString,
            ASH__grpc__pb2.ServerRVCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
